@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<MudContainer Class="login-container">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h4" Class="text-center">Admin Login</MudText>
        </MudCardHeader>

        <MudCardContent>
            <MudTextField Label="Username" @bind-Value="username" Required="true" />
            <MudTextField Label="Password" @bind-Value="password" InputType="InputType.Password" Required="true" />
        </MudCardContent>

        <MudCardActions Class="justify-end">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginUser">Login</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private string username = "";
    private string password = "";

    private async Task LoginUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error",
                text = "Please fill in all fields.",
                icon = "error"
            });
            return;
        }

        var loginData = new
        {
            Username = username,
            PasswordHash = password
        };

        var response = await Http.PostAsJsonAsync("https://localhost:7043/api/auth/login", loginData);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Success!",
                text = "Login successful.",
                icon = "success"
            });

            Navigation.NavigateTo("/Welcoming", forceLoad: true);
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Login Failed",
                text = errorMessage,
                icon = "error"
            });
        }
    }
}
