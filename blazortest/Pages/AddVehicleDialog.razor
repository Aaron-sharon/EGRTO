@inject HttpClient Http
@inject NavigationManager Navigation
@inject IDialogService DialogService
@using Aaronbackend
@using MudBlazor
@inject IJSRuntime JS
@inject ISnackbar Snackbar

@code {
	[Parameter] public EventCallback OnVehicleAdded { get; set; }
	[Parameter] public EventCallback OnVehicleUpdated { get; set; }
	[Parameter] public Dictionary<string, object>? Vehicle { get; set; }
	[Parameter] public bool IsEditMode { get; set; } = false;

	private Vehicle vehicle = new();
	private bool isSubmitting = false;
	private IDialogReference? _dialogReference; // ✅ Store dialog reference
	private Dictionary<string, bool> validationErrors = new(); // ✅ Track validation errors
	private bool IsSubmitDisabled => HasErrors() || isSubmitting;

	protected override void OnInitialized()
	{
		if (IsEditMode && Vehicle != null)
		{
			vehicle = new Vehicle
				{
					Id = Vehicle.ContainsKey("id") && int.TryParse(Vehicle["id"]?.ToString(), out int vehicleId) ? vehicleId : 0,
					LicensePlate = Vehicle["licensePlate"]?.ToString() ?? "",
					Model = Vehicle["model"]?.ToString() ?? "",
					Owner = Vehicle["owner"]?.ToString() ?? "",
					OwnerAddress = Vehicle["ownerAddress"]?.ToString() ?? "",
					OwnerContactNumber = Vehicle["ownerContactNumber"]?.ToString() ?? "",
					OwnerEmail = Vehicle["ownerEmail"]?.ToString() ?? "",
					VehicleName = Vehicle["vehicleName"]?.ToString() ?? "",
					Price = float.TryParse(Vehicle["price"]?.ToString(), out float price) ? price : 0
				};
		}
	}

	public void SetDialogReference(IDialogReference dialogReference)
	{
		_dialogReference = dialogReference;
	}

	private async Task SubmitVehicle()
	{
		if (validationErrors.Values.Contains(true))
		{
			Console.WriteLine("Form contains validation errors. Cannot submit.");
			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Validation Error",
				text = "Please correct the errors before submitting.",
				icon = "error"
			});
			return;
		}

		isSubmitting = true;
		try
		{
			HttpResponseMessage response;
			if (IsEditMode)
			{
				response = await Http.PutAsJsonAsync($"https://localhost:7043/Logic/update/{vehicle.Id}", vehicle);
			}
			else
			{
				response = await Http.PostAsJsonAsync("https://localhost:7043/Logic/add", vehicle);
			}

			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine(IsEditMode ? "Vehicle updated successfully." : "Vehicle added successfully.");
				vehicle = new Vehicle();

				if (IsEditMode)
				{
					await OnVehicleUpdated.InvokeAsync();
				}
				else
				{
					await OnVehicleAdded.InvokeAsync();
				}

				// Close the dialog first
				_dialogReference?.Close(DialogResult.Ok(vehicle));

				// 🕒 Add delay before showing the SweetAlert
				await Task.Delay(1000); // 1 second delay

				Snackbar.Add("Operation Successful", Severity.Success);
			}
			else
			{
				string errorMessage = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Error: {errorMessage}");

				// Close the dialog before showing the error
				_dialogReference?.Close(DialogResult.Cancel());

				// Delay before showing error alert
				await Task.Delay(1000);

				Snackbar.Add("Something Went Wrong!", Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Exception: {ex.Message}");

			// Close the dialog before showing unexpected error
			_dialogReference?.Close(DialogResult.Cancel());

			// Delay before showing error alert
			await Task.Delay(1000);

			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}

		isSubmitting = false;
	}

	private string? ValidateLicensePlate(string licensePlate)
	{
		string pattern = @"^[A-Z]{2}\d{2}[A-Z]{2}\d{4}$";
		bool hasError = string.IsNullOrWhiteSpace(licensePlate) || !System.Text.RegularExpressions.Regex.IsMatch(licensePlate, pattern);
		validationErrors["LicensePlate"] = hasError; // ✅ Track error state
		return hasError ? "Invalid License Plate format. Expected format: AA20AA2020." : null;
	}

	private string? ValidateModel(string model)
	{
		string pattern = @"\d{4}";
		bool hasError = string.IsNullOrWhiteSpace(model) || !System.Text.RegularExpressions.Regex.IsMatch(model, pattern);
		validationErrors["Model"] = hasError;
		return hasError ? "Invalid Model. Expected format: 2000." : null;
	}

	private string? ValidateText(string owner)
	{
		string pattern = @"^[A-Za-z.\s_-]+$";
		bool hasError = string.IsNullOrWhiteSpace(owner) || !System.Text.RegularExpressions.Regex.IsMatch(owner, pattern);
		validationErrors["Owner"] = hasError;
		return hasError ? "Invalid Input." : null;
	}

	private string? ValidateTextAddress(string ownerAddress)
	{
		string pattern = @"^[A-Za-z0-9\s\[\]()_.-]+$";
		bool hasError = string.IsNullOrWhiteSpace(ownerAddress) || !System.Text.RegularExpressions.Regex.IsMatch(ownerAddress, pattern);
		validationErrors["OwnerAddress"] = hasError;
		return hasError ? "Invalid Input. Only letters, numbers, spaces, hyphens, brackets, underscores, and periods are allowed." : null;
	}

	private string? ValidatePhoneNumber(string ownerContactNumber)
	{
		string pattern = @"\d{10}";
		bool hasError = string.IsNullOrWhiteSpace(ownerContactNumber) || !System.Text.RegularExpressions.Regex.IsMatch(ownerContactNumber, pattern);
		validationErrors["OwnerContactNumber"] = hasError;
		return hasError ? "Field should have 10 Digits." : null;
	}

	private string? ValidateEmail(string ownerEmail)
	{
		string pattern = @"^[\w\.-]+@([\w-]+\.)+[\w-]{2,}$";
		bool hasError = string.IsNullOrWhiteSpace(ownerEmail) || !System.Text.RegularExpressions.Regex.IsMatch(ownerEmail, pattern);
		validationErrors["OwnerEmail"] = hasError;
		return hasError ? "Invalid Email format." : null;
	}

	private string? ValidatePrice(string price)
	{
		string pattern = @"\d{4}";
		bool hasError = string.IsNullOrWhiteSpace(price) || !System.Text.RegularExpressions.Regex.IsMatch(price, pattern);
		validationErrors["Price"] = hasError;
		return hasError ? "Invalid Amount." : null;
	}

	// ✅ Check if there are any validation errors
	private bool HasErrors() => validationErrors.Values.Contains(true);
}

<MudContainer Class="Add-vehicle-Container-box pb-4">
	<MudGrid>
		<MudItem>
			<MudCard>
				<MudCardHeader>
					<MudText Typo="Typo.h5">@((IsEditMode) ? "Edit Vehicle" : "Add Vehicle")</MudText>
				</MudCardHeader>
				<MudCardContent>
					<MudTextField @bind-Value="vehicle.LicensePlate"
								  Label="License Plate"
								  Variant="Variant.Outlined"
								  Placeholder="AA20AA2020"
								  Required="true"
								  Validation="ValidateLicensePlate"
								  Immediate="true" />

					<MudTextField @bind-Value="vehicle.Model" Label="Model" Variant="Variant.Outlined" Placeholder="Ex - 2020" Required="true" Validation="ValidateModel" Immediate="true" MaxLength="4" />

					<MudTextField @bind-Value="vehicle.Owner" Label="Name" Variant="Variant.Outlined" Placeholder="Ex - Sharu Bhai" Required="true" Validation="ValidateText" Immediate="true" />

					<MudTextField @bind-Value="vehicle.OwnerAddress" Label="Address" Variant="Variant.Outlined" Placeholder="Ex - Bali, Thailand" Required="true" Validation="ValidateTextAddress" Immediate="true" MaxLength="100" />

					<MudTextField @bind-Value="vehicle.OwnerContactNumber" Label="Contact Number" Variant="Variant.Outlined" Placeholder="Ex - 6900000069" Required="true" MaxLength="10" Validation="ValidatePhoneNumber" Immediate="true" />

					<MudTextField @bind-Value="vehicle.OwnerEmail" Label="Email" Variant="Variant.Outlined" Placeholder="Ex - you@you.com" Required="true" Validation="ValidateEmail" Immediate="true" />

					<MudTextField @bind-Value="vehicle.VehicleName" Label="Vehicle Name" Variant="Variant.Outlined" Placeholder="Ex - Royal Enfield Bullet" Required="true" Validation="ValidateTextAddress" Immediate="true" />

					<MudTextField @bind-Value="vehicle.Price" Label="Vehicle Price" Variant="Variant.Outlined" Placeholder="69,000" Required="true" Validation="ValidatePrice" Immediate="true" />
				</MudCardContent>
				<MudCardActions>
					<MudButton OnClick="SubmitVehicle"
							   Disabled="IsSubmitDisabled"
							   FullWidth="true"
							   Class="btn-Add-vehicle-container-box-close-button">
						@((IsEditMode) ? "Update Vehicle" : "Save Vehicle")
					</MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>
	</MudGrid>
</MudContainer>
