@page "/signup"

@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<MudContainer Class="signup-container">
    <MudText Typo="Typo.h4" Align="Align.Center">Admin Signup</MudText>
    <MudForm @ref="form" @onsubmit="SubmitSignup">

        <MudTextField Label="Username" @bind-Value="user.Username" Required="true" RequiredError="Username is required." />

        <MudTextField Label="Email" @bind-Value="user.Email" Required="true"
                      RequiredError="Email is required." Type="email" />

        <MudTextField Label="Password" @bind-Value="user.PasswordHash" Required="true"
                      RequiredError="Password is required." InputType="InputType.Password" />

        <MudTextField Label="Confirm Password" @bind-Value="confirmPassword" Required="true"
                      RequiredError="Confirm Password is required." InputType="InputType.Password" />

        <MudButton Type="Submit" Color="Color.Primary" Variant="Variant.Filled">Sign Up</MudButton>
    </MudForm>
</MudContainer>

@code {
    private MudForm form;
    private User user = new();
    private string confirmPassword = "";

    private async Task SubmitSignup()
    {
        if (user.PasswordHash != confirmPassword)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error",
                text = "Passwords do not match.",
                icon = "error"
            });
            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:7043/api/auth/signup", user);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Success",
                text = "Admin registered successfully.",
                icon = "success"
            });

            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error",
                text = errorMessage,
                icon = "error"
            });
        }
    }

    private class User
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PasswordHash { get; set; } = string.Empty;
    }
}
