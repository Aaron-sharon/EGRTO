@page "/signup"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS


<MudContainer Class="signup-container">
    <div class="signup-form">
        <MudCard Class="signup-card">
            <div class="logo-container">
                <img src="/EG_LOGO.jpg" alt="Logo" class="signup-logo" />
            </div>

            <MudCardHeader Class="signup-header">
                <MudText Typo="Typo.h4" Class="text-center">Create an Account</MudText>
            </MudCardHeader>

            <MudCardContent>
                <MudTextField Label="Username" @bind-Value="username" Required="true" />
                <MudTextField Label="Password" @bind-Value="password" InputType="InputType.Password" Required="true" />
                <MudTextField Label="Confirm Password" @bind-Value="confirmPassword" InputType="InputType.Password" Required="true" />
            </MudCardContent>

            <MudCardActions>
                <MudButton Class="btn-primary-button" OnClick="SignupUser">Sign Up</MudButton>
            </MudCardActions>

            <div class="login-link text-center">
                <MudLink Href="/" Class="signup-link-text">Already have an account? Log in</MudLink>
            </div>
        </MudCard>
    </div>
</MudContainer>


@code {
    private string username = "";
    private string password = "";
    private string confirmPassword = "";

    private async Task SignupUser()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error",
                text = "Please fill in all fields.",
                icon = "error"
            });
            return;
        }

        if (password != confirmPassword)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error",
                text = "Passwords do not match.",
                icon = "error"
            });
            return;
        }

        var signupData = new { Username = username, PasswordHash = password };
        var response = await Http.PostAsJsonAsync("https://localhost:7043/api/auth/signup", signupData);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Success!",
                text = "Signup successful.",
                icon = "success",
                showConfirmButton = false,
                timer = 2000
            });

            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Signup Failed",
                text = errorMessage,
                icon = "error"
            });
        }
    }
}
