@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Text.Json;

<div class="login-container">
    <div class="login-form">
        <MudCard Class="login-card">
            <MudCardHeader Class="login-header">
                <div class="login-logo">
                    <img src="/EG_LOGO.jpg" alt="Logo" class="signup-logo" />
                </div>
                <MudText Typo="Typo.h4" Class="text-center">Login</MudText>
            </MudCardHeader>

            <MudCardContent>
                <MudTextField Label="Username" @bind-Value="username" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" />
                <MudTextField Label="Password" @bind-Value="password" InputType="InputType.Password" Required="true"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" />
            </MudCardContent>

            <MudCardActions>
				<MudButton Class="btn-primary-button" OnClick="LoginUser">
					Login
				</MudButton>
            </MudCardActions>

            <MudDivider />
            <MudText Align="Align.Center">
                Don't have an Account? <MudLink Href="/signup">Sign up</MudLink>
            </MudText>
        </MudCard>
    </div>
</div>



@code {
	private string username = "";
	private string password = "";

	private async Task LoginUser()
	{
		if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
		{
			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Error",
				text = "Please fill in all fields.",
				icon = "error"
			});
			return;
		}

		var loginData = new
		{
			Username = username,
			PasswordHash = password
		};

		var response = await Http.PostAsJsonAsync("api/auth/login", loginData, new JsonSerializerOptions
			{
				PropertyNamingPolicy = JsonNamingPolicy.CamelCase
			});

		if (response.IsSuccessStatusCode)
		{
			await JS.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");

			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Success!",
				text = "Login successful.",
				icon = "success",
				showConfirmButton = false,
				timer = 2000
			});

			await Task.Delay(500);  // Add a short delay
			Navigation.NavigateTo("/Welcoming", forceLoad: true);
		}
		else
		{
			string errorMessage = await response.Content.ReadAsStringAsync();
			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Login Failed",
				text = errorMessage,
				icon = "error"
			});
		}
	}
}
