@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Text.Json;


<MudContainer Class="login-container">
	<MudCard>
		<MudCardHeader>
			<MudText Typo="Typo.h4" Class="text-center">Admin Login</MudText>
		</MudCardHeader>

		<MudCardContent>
			<MudTextField Label="Username" @bind-Value="username" Required="true" />
			<MudTextField Label="Password" @bind-Value="password" InputType="InputType.Password" Required="true" />
		</MudCardContent>

		<MudCardActions Class="justify-center">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginUser">Login</MudButton>
		</MudCardActions>
		<MudDivider />
		<MudText Align="Align.Center">Dont have an Account? <MudLink Href="/signup">Sign up</MudLink></MudText>
	</MudCard>
</MudContainer>

@code {
	private string username = "";
	private string password = "";

	private async Task LoginUser()
	{
		if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
		{
			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Error",
				text = "Please fill in all fields.",
				icon = "error"
			});
			return;
		}

		var loginData = new
		{
			Username = username,
			PasswordHash = password
		};

		var response = await Http.PostAsJsonAsync("api/auth/login", loginData, new JsonSerializerOptions
			{
				PropertyNamingPolicy = JsonNamingPolicy.CamelCase
			});

		if (response.IsSuccessStatusCode)
		{
			await JS.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");

			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Success!",
				text = "Login successful.",
				icon = "success"
			});

			await Task.Delay(500);  // Add a short delay
			Navigation.NavigateTo("/Welcoming", forceLoad: true);
		}
		else
		{
			string errorMessage = await response.Content.ReadAsStringAsync();
			await JS.InvokeVoidAsync("Swal.fire", new
			{
				title = "Login Failed",
				text = errorMessage,
				icon = "error"
			});
		}
	}

}
